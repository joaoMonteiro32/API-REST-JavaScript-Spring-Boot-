package project.demo.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.web.client.RestTemplate;
import project.demo.repository.EmailNotificationRepository;
import project.model.EmailNotification;
import project.model.Vulnerabilities;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.util.Set;

@Service
public class VulnerabilityCheckService {

    @Autowired
    private EmailNotificationRepository emailNotificationRepository;

    private final String removePodUrl = "http://localhost:8081/remover"; // URL do RemovePodController

    private Logger logger = LoggerFactory.getLogger(VulnerabilityCheckService.class);

    @Transactional(readOnly = true)
    public void checkVulnerabilities() {
        boolean hasEmailNotifications = emailNotificationRepository.count() > 0;

        if (!hasEmailNotifications) {
            logger.info("No email notifications present. Skipping vulnerability check.");
            return;
        }

        LocalDateTime now = LocalDateTime.now();
        LocalDateTime threshold = now.minusHours(48);

        // Buscar notificações de email que foram enviadas há mais de 48 horas
        Set<EmailNotification> notifications = emailNotificationRepository.findAllBySentDateBefore(threshold);
        logger.info("Vamos ca ver");
        for (EmailNotification notification : notifications) {
            Set<Vulnerabilities> vulnerabilities = notification.getVulnerabilities();
            for (Vulnerabilities vulnerability : vulnerabilities) {
                if (vulnerabilityStillExists(vulnerability.getId())) {
                    sendRemovePodRequest(vulnerability.getTargetId().getId(), vulnerability.getTargetId().getName());
                }
            }
        }
    }

    private boolean vulnerabilityStillExists(Integer vulnerabilityId) {
        // Implementar lógica para verificar se a vulnerabilidade ainda existe na base de dados
        return emailNotificationRepository.existsById(Long.valueOf(vulnerabilityId));
    }

    private ResponseEntity<String> sendRemovePodRequest(Integer targetId, String targetName) {
        String payload = targetId + ":" + targetName;
        logger.info("Sending remove pod request for: {}", payload);
        RestTemplate restTemplate = new RestTemplate();

        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");

        String jsonPayload = "{\"message\": \"" + payload + "\"}";

        HttpEntity<String> requestEntity = new HttpEntity<>(jsonPayload, headers);

        ResponseEntity<String> response = restTemplate.exchange(
                removePodUrl,
                HttpMethod.POST,
                requestEntity,
                String.class
        );

        return ResponseEntity.ok(response.getBody());
    }
}

