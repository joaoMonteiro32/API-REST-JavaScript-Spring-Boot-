package project.demo.controller;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import project.demo.repository.TargetRepository;
import project.demo.repository.EmailNotificationRepository;
import project.demo.repository.VulnerabilitiesRepository;
import project.model.EmailNotification;
import project.model.Vulnerabilities;

@RestController
public class VulnerabilityCheckController {

    private static final Logger logger = LoggerFactory.getLogger(VulnerabilityCheckController.class);

    @Autowired
    private EmailNotificationRepository emailNotificationRepository;

    @Autowired
    private VulnerabilitiesRepository vulnerabilitiesRepository; 

    @Autowired
    private TargetRepository targetRepository;

    private final String removePodUrl = "http://localhost:8081/remover"; 
    @GetMapping("/vulnerability/check")
    public ResponseEntity<String> triggerVulnerabilityCheck() {

        logger.info("Received GET request to trigger vulnerability check");

        boolean hasEmailNotifications = emailNotificationRepository.count() > 0;

        if (!hasEmailNotifications) {
            logger.info("No email notifications present. Skipping vulnerability check.");
            return ResponseEntity.noContent().build();
        }

        LocalDateTime now = LocalDateTime.now();
        LocalDateTime threshold = now.minusMinutes(10);

        Set<Integer> processedTargetIds = new HashSet<>();

        Set<EmailNotification> notifications = emailNotificationRepository.findAllBySentDateBefore(threshold);
        for (EmailNotification notification : notifications) {
            Set<Vulnerabilities> vulnerabilities = notification.getVulnerabilities();
            for (Vulnerabilities vulnerability : vulnerabilities) {
                Integer targetId = vulnerability.getTargetId().getId();
                if (!processedTargetIds.contains(targetId) && vulnerabilityStillExists(vulnerability.getId())) {
                    String extractedName = extractName(vulnerability.getTargetId().getName());
                    if (targetRepository.existsByNameContaining("Deployment/" + extractedName)) {
                        if(extractedName.equals("remove-script") || extractedName.equals("api-rest")){
                            continue;
                        }
                        sendRemovePodRequest(targetId, extractedName);
                        processedTargetIds.add(targetId);
                    }
                }
            }
        }
        return ResponseEntity.ok("Vulnerability check completed");
    }

    private boolean vulnerabilityStillExists(Integer vulnerabilityId) {
        return vulnerabilitiesRepository.existsById(Long.valueOf(vulnerabilityId));
    }

    private ResponseEntity<String> sendRemovePodRequest(Integer targetId, String targetName) {
        String payload = targetId + ":" + targetName;
        logger.info("Sending remove pod request for: {}", payload);
        RestTemplate restTemplate = new RestTemplate();

        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");

        String jsonPayload = "{\"message\": \"" + payload + "\"}";

        HttpEntity<String> requestEntity = new HttpEntity<>(jsonPayload, headers);

        ResponseEntity<String> response = restTemplate.exchange(
                removePodUrl,
                HttpMethod.POST,
                requestEntity,
                String.class
        );

        return ResponseEntity.ok(response.getBody());
    }
    public String extractName(String fullName) {
        String[] parts = fullName.split("/");
        String nameWithVersion = parts.length > 1 ? parts[1] : parts[0];
        logger.info(nameWithVersion.split(":")[0]);
        return nameWithVersion.split(":")[0];
    }
    
}
