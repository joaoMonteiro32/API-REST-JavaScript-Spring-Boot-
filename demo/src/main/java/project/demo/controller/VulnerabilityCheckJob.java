package project.demo.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.web.client.RestTemplate;
import project.demo.repository.EmailNotificationRepository;
import project.model.EmailNotification;
import project.model.Vulnerabilities;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.util.Set;

@Component
@EnableAsync 
public class VulnerabilityCheckJob{

    @Autowired
    private EmailNotificationRepository emailNotificationRepository;

    private final String removePodUrl = "http://localhost:8081/remover"; 

    private boolean hasEmailNotifications = false;

    Logger logger = LoggerFactory.getLogger(JsonController.class);

    @Async
    @EventListener(JsonController.EntitiesSavedEvent.class)
    @Transactional(readOnly = true)
    public void onEntitiesSaved(JsonController.EntitiesSavedEvent event) {
        hasEmailNotifications = emailNotificationRepository.count() > 0;
        logger.info("Entra");
    }

    @Scheduled(fixedRate = 172800000) // 48 horas em milissegundos
    public void checkVulnerabilities() {
        if (!hasEmailNotifications) {
            logger.info("Primeira n√£o faz nada");
            return; 
        }
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime threshold = now.minusHours(48);

        
        Set<EmailNotification> notifications = emailNotificationRepository.findAllBySentDateBefore(threshold);

        for (EmailNotification notification : notifications) {
            Set<Vulnerabilities> vulnerabilities = notification.getVulnerabilities();
            for (Vulnerabilities vulnerability : vulnerabilities) {
                if (vulnerabilityStillExists(vulnerability.getId())) {
                    sendRemovePodRequest(vulnerability.getTargetId().getId(), vulnerability.getTargetId().getName());
                }
            }
        }
    }

    private boolean vulnerabilityStillExists(Integer vulnerabilityId) {
       
        return emailNotificationRepository.existsById(Long.valueOf(vulnerabilityId));
    }

    private ResponseEntity<String> sendRemovePodRequest(Integer targetId, String targetName) {
        String payload = targetId + ":" + targetName;
        logger.info(payload);
        RestTemplate restTemplate = new RestTemplate();

        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");

        String jsonPayload = "{\"message\": \"" + payload + "\"}";

        HttpEntity<String> requestEntity = new HttpEntity<>(jsonPayload, headers);

        ResponseEntity<String> response = restTemplate.exchange(
            removePodUrl,
            HttpMethod.POST,
            requestEntity,
            String.class
        );

        return ResponseEntity.ok(response.getBody());
    }
}